@using BtsPortal.Web.Extensions
@model BtsPortal.Entities.Bam.BamResult
@{
    var columnTypes = new Dictionary<string, Type>();
    int totalPage = Model.TotalPage.GetValueOrDefault(1) > 0 ? Model.TotalPage.GetValueOrDefault(1) : 1;
}
<br />
@if (ViewBag.error != null)
{
    <div class="alert alert-danger">
        @ViewBag.error
    </div>
}
else
{
    if (Model.FilterParameters.Count > 0)
    {
        @Html.Raw(Model.FilterParameters.ToHtmlTable())
    }
    <div class="pull-left col-md-offset-11 col-md-1">
        <button class="btn btn-sm btn-primary" onclick="loadViewData('1','false')">
            <i class="fa fa-refresh" aria-hidden="true"></i>&nbsp;Refresh
        </button>
    </div>
    <br/>
    <div class="row">
        @if (Model.PageNumber > 1 && Model.PageNumber <= Model.TotalPage)
        {
            <button class="btn btn-xs" onclick="loadViewData('@(Model.PageNumber-1)','false')">
                <i class="fa fa-chevron-circle-left" aria-hidden="true"></i>
            </button>

        }
        else
        {
            <button class="btn btn-xs" disabled="disabled">
                <i class="fa fa-chevron-circle-left" aria-hidden="true"></i>
            </button>
        }
        <i>Page @Model.PageNumber of @totalPage</i>
        @if (Model.PageNumber < Model.TotalPage )
        {
            <button class="btn btn-xs" onclick="loadViewData('@(Model.PageNumber+1)','false')">
                <i class="fa fa-chevron-circle-right" aria-hidden="true"></i>
            </button>

        }
        else
        {
            <button class="btn btn-xs" disabled="disabled">
                <i class="fa fa-chevron-circle-right" aria-hidden="true"></i>
            </button>
        }
    </div>
    <br />
    <div class="row">
        <table class="table table-font11 table-responsive table-striped">
            <tr>
                @for (int i = 0; i < Model.ResultDataTable.Columns.Count; i++)
                {
                    if (!columnTypes.ContainsKey(Model.ResultDataTable.Columns[i].ColumnName))
                    {
                        columnTypes.Add(Model.ResultDataTable.Columns[i].ColumnName, Model.ResultDataTable.Columns[i].DataType);
                    }
                    <th>
                        @Model.ResultDataTable.Columns[i].ColumnName
                    </th>
                }
            </tr>

            @for (int i = 0; i < Model.ResultDataTable.Rows.Count; i++)
                {
                <tr>
                    @for (int j = 0; j < Model.ResultDataTable.Columns.Count; j++)
                    {
                        if (columnTypes[Model.ResultDataTable.Columns[j].ColumnName] == typeof(DateTime))
                        {
                            <td>
                                @Model.ResultDataTable.Rows[i][j].ToString().ToDisplayedDateTime()
                            </td>
                        }
                        else
                        {
                            <td>
                               @Model.ResultDataTable.Rows[i][j].ToString()
                            </td>
                        }


                    }
                </tr>
            }
        </table>
    </div>
}

<script type="text/javascript">
    $(document).ready(function() {
        $(".datetimepicker").datetimepicker({});
    });
</script>
